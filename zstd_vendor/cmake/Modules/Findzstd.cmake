##################################################################################################
#
# CMake script for finding zstd.
#
# Input variables:
#
# - zstd_ROOT_DIR (optional): When specified, header files and libraries will be searched for in
#     ${zstd_ROOT_DIR}/include
#     ${zstd_ROOT_DIR}/libs
#   respectively, and the default CMake search order will be ignored. When unspecified, the default
#   CMake search order is used.
#   This variable can be specified either as a CMake or environment variable. If both are set,
#   preference is given to the CMake variable.
#   Use this variable for finding packages installed in a nonstandard location, or for enforcing
#   that one of multiple package installations is picked up.
#
#
# Cache variables (not intended to be used in CMakeLists.txt files)
#
# - zstd_INCLUDE_DIR: Absolute path to package headers.
# - zstd_LIBRARY: Absolute path to library.
#
#
# Output variables:
#
# - zstd_FOUND: Boolean that indicates if the package was found
# - zstd_INCLUDE_DIRS: Paths to the necessary header files
# - zstd_LIBRARIES: Package libraries
#
#
# Example usage:
#
#  find_package(zstd)
#  if(NOT zstd_FOUND)
#    # Error handling
#  endif()
#  ...
#  include_directories(${zstd_INCLUDE_DIRS} ...)
#  ...
#  target_link_libraries(my_target ${zstd_LIBRARIES})
#
##################################################################################################

# First attempt to find Config-file package
find_package(zstd CONFIG QUIET)

if (NOT zstd_FOUND)


    # Get package location hint from environment variable (if any)
    if(NOT zstd_ROOT_DIR AND DEFINED ENV{zstd_ROOT_DIR})
        set(zstd_ROOT_DIR "$ENV{zstd_ROOT_DIR}" CACHE PATH
                "zstd base directory location (optional, used for nonstandard installation paths)")
    endif()

    # Search path for nonstandard package locations
    if(zstd_ROOT_DIR)
        set(zstd_INCLUDE_PATH PATHS "${zstd_ROOT_DIR}/include" NO_DEFAULT_PATH)
        set(zstd_LIBRARY_PATH PATHS "${zstd_ROOT_DIR}/lib"     NO_DEFAULT_PATH)
    endif()

    # Find headers and libraries
    find_path(zstd_INCLUDE_DIR NAMES zstd.h PATH_SUFFIXES "zstd" ${zstd_INCLUDE_PATH})
    find_library(zstd_LIBRARY  NAMES zstd   PATH_SUFFIXES "zstd" ${zstd_LIBRARY_PATH})

    mark_as_advanced(zstd_INCLUDE_DIR
            zstd_LIBRARY)

    # Output variables generation
    include(FindPackageHandleStandardArgs)
    find_package_handle_standard_args(zstd DEFAULT_MSG zstd_LIBRARY
            zstd_INCLUDE_DIR)

    set(zstd_FOUND ${zstd_FOUND}) # Enforce case-correctness: Set appropriately cased variable...
    unset(zstd_FOUND) # ...and unset uppercase variable generated by find_package_handle_standard_args

    if(zstd_FOUND)
        set(zstd_INCLUDE_DIRS ${zstd_INCLUDE_DIR})
        set(zstd_LIBRARIES ${zstd_LIBRARY})
    endif()
endif()
