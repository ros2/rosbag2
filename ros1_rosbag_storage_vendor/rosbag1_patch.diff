diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 000000000..8cadbcabb
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,2 @@
+cmake_minimum_required(VERSION 3.5)
+add_subdirectory(tools/rosbag_storage)
diff --git a/tools/rosbag_storage/CMakeLists.txt b/tools/rosbag_storage/CMakeLists.txt
index ad2769817..f4a33a398 100644
--- a/tools/rosbag_storage/CMakeLists.txt
+++ b/tools/rosbag_storage/CMakeLists.txt
@@ -1,77 +1,154 @@
-cmake_minimum_required(VERSION 2.8.3)
+cmake_minimum_required(VERSION 3.5)
 
-project(rosbag_storage)
+project(ros1_rosbag_storage)
+
+# Default to C99
+if(NOT CMAKE_C_STANDARD)
+  set(CMAKE_C_STANDARD 99)
+endif()
+
+# Default to C++14
+if(NOT CMAKE_CXX_STANDARD)
+  set(CMAKE_CXX_STANDARD 14)
+endif()
 
 if(NOT WIN32)
-  set_directory_properties(PROPERTIES COMPILE_OPTIONS "-Wall;-Wextra")
+  add_compile_options(-Wall -Wextra)
 endif()
 
+find_package(ament_cmake REQUIRED)
+find_package(pluginlib REQUIRED)
+find_package(cpp_common REQUIRED)
+find_package(roscpp_serialization REQUIRED)
+find_package(roscpp_traits REQUIRED)
+find_package(rostime REQUIRED)
+find_package(roslz4 REQUIRED)
 find_package(console_bridge REQUIRED)
-find_package(catkin REQUIRED COMPONENTS cpp_common pluginlib roscpp_serialization roscpp_traits rostime roslz4)
 find_package(Boost REQUIRED COMPONENTS date_time filesystem program_options regex)
 find_package(BZip2 REQUIRED)
 
-catkin_package(
-  CFG_EXTRAS rosbag_storage-extras.cmake
-  INCLUDE_DIRS include
-  LIBRARIES rosbag_storage
-  CATKIN_DEPENDS pluginlib roslz4
-  DEPENDS console_bridge Boost
-)
 
 # Support large bags (>2GB) on 32-bit systems
 add_definitions(-D_FILE_OFFSET_BITS=64)
 
-include_directories(include ${catkin_INCLUDE_DIRS} ${console_bridge_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${BZIP2_INCLUDE_DIR})
 add_definitions(${BZIP2_DEFINITIONS})
 
 set(AES_ENCRYPT_SOURCE "")
 set(AES_ENCRYPT_LIBRARIES "")
 if(NOT WIN32)
-  set(AES_ENCRYPT_SOURCE "src/aes_encryptor.cpp")
+  set(AES_ENCRYPT_SOURCE "src/aes_encryptor.cpp" "src/gpgme_utils.cpp")
   set(AES_ENCRYPT_LIBRARIES "crypto" "gpgme")
 endif()
 
-add_library(rosbag_storage
-  ${AES_ENCRYPT_SOURCE}
+add_library(ros1_rosbag_storage SHARED
   src/bag.cpp
   src/bag_player.cpp
   src/buffer.cpp
   src/bz2_stream.cpp
   src/lz4_stream.cpp
   src/chunked_file.cpp
-  src/encryptor.cpp
   src/message_instance.cpp
   src/query.cpp
   src/stream.cpp
   src/view.cpp
   src/uncompressed_stream.cpp
 )
-target_link_libraries(rosbag_storage ${catkin_LIBRARIES} ${Boost_LIBRARIES} ${BZIP2_LIBRARIES} ${console_bridge_LIBRARIES} ${AES_ENCRYPT_LIBRARIES})
 
-install(TARGETS rosbag_storage
-  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
-  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
+target_include_directories(ros1_rosbag_storage PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+  $<INSTALL_INTERFACE:include>
+  ${console_bridge_INCLUDE_DIRS}
+  ${Boost_INCLUDE_DIRS}
+  ${BZIP2_INCLUDE_DIR})
+
+# prevent pluginlib from using boost because using boost seems to not work correctly
+target_compile_definitions(ros1_rosbag_storage PUBLIC "PLUGINLIB__DISABLE_BOOST_FUNCTIONS")
+
+target_link_libraries(ros1_rosbag_storage
+  ${Boost_LIBRARIES} ${BZIP2_LIBRARIES} ${console_bridge_LIBRARIES} ${AES_ENCRYPT_LIBRARIES})
+
+pluginlib_export_plugin_description_file(ros1_rosbag_storage encryptor_plugins.xml)
+
+ament_target_dependencies(ros1_rosbag_storage
+  cpp_common
+  pluginlib
+  roslz4
+  roscpp_traits
+  roscpp_serialization
+  rostime
+)
+
+install(TARGETS ros1_rosbag_storage
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib
+  RUNTIME DESTINATION bin
+)
+
+add_library(rosbag_default_encryption_plugins SHARED
+  ${AES_ENCRYPT_SOURCE}
+  src/no_encryptor.cpp
+)
+
+target_include_directories(rosbag_default_encryption_plugins PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+  $<INSTALL_INTERFACE:include>
+  ${console_bridge_INCLUDE_DIRS}
+  ${Boost_INCLUDE_DIRS}
+  ${BZIP2_INCLUDE_DIR})
+
+target_link_libraries(rosbag_default_encryption_plugins
+  ros1_rosbag_storage
+  ${Boost_LIBRARIES}
+  ${BZIP2_LIBRARIES}
+  ${console_bridge_LIBRARIES}
+  ${AES_ENCRYPT_LIBRARIES})
+
+ament_target_dependencies(rosbag_default_encryption_plugins
+  cpp_common
+  pluginlib
+  roslz4
+  roscpp_traits
+  roscpp_serialization
+  rostime
+)
+
+install(TARGETS rosbag_default_encryption_plugins
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib
+  RUNTIME DESTINATION bin
 )
 
 install(DIRECTORY include/
-  DESTINATION ${CATKIN_GLOBAL_INCLUDE_DESTINATION}
-  FILES_MATCHING PATTERN "*.h"
+  DESTINATION include
 )
 
 if(NOT WIN32)
   install(FILES encryptor_plugins.xml
-    DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
+    DESTINATION share/
   )
 
-  if(CATKIN_ENABLE_TESTING)
-    find_package(rostest)
-
-    catkin_add_gtest(test_aes_encryptor test/test_aes_encryptor.cpp
-      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/test)
-    if(TARGET test_aes_encryptor)
-      target_link_libraries(test_aes_encryptor rosbag_storage ${catkin_LIBRARIES} ${Boost_LIBRARIES})
-    endif()
-  endif()
+#  if(BUILD_TESTING)
+#    find_package(ament_cmake_gmock)
+#
+#    catkin_add_gtest(test_aes_encryptor test/test_aes_encryptor.cpp
+#      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/test)
+#    if(TARGET test_aes_encryptor)
+#      target_link_libraries(test_aes_encryptor rosbag_storage ${catkin_LIBRARIES} ${Boost_LIBRARIES})
+#    endif()
+#  endif()
 endif()
+
+ament_export_include_directories(include)
+ament_export_libraries(ros1_rosbag_storage)
+ament_export_dependencies(
+  console_bridge
+  cpp_common
+  pluginlib
+  roscpp_serialization
+  roscpp_traits
+  rostime
+  roslz4
+  BZip2
+)
+
+ament_package()
diff --git a/tools/rosbag_storage/encryptor_plugins.xml b/tools/rosbag_storage/encryptor_plugins.xml
index 91c0d31dc..fb66f450c 100644
--- a/tools/rosbag_storage/encryptor_plugins.xml
+++ b/tools/rosbag_storage/encryptor_plugins.xml
@@ -1,4 +1,4 @@
-<library path="lib/librosbag_storage">
+<library path="rosbag_default_encryption_plugins">
   <class name="rosbag/NoEncryptor" type="rosbag::NoEncryptor" base_class_type="rosbag::EncryptorBase">
     <description>This is a plugin for no encryption.</description>
   </class>
diff --git a/tools/rosbag_storage/include/rosbag/aes_encryptor.h b/tools/rosbag_storage/include/rosbag/aes_encryptor.h
new file mode 100644
index 000000000..b9a0ef6b0
--- /dev/null
+++ b/tools/rosbag_storage/include/rosbag/aes_encryptor.h
@@ -0,0 +1,80 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2017, Open Source Robotics Foundation
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ROSBAG_AES_ENCRYPTION_H
+#define ROSBAG_AES_ENCRYPTION_H
+
+#include "rosbag/encryptor.h"
+
+#ifndef _WIN32
+  #include <openssl/aes.h>
+
+namespace rosbag {
+
+class AesCbcEncryptor : public EncryptorBase
+{
+public:
+    static const std::string GPG_USER_FIELD_NAME;
+    static const std::string ENCRYPTED_KEY_FIELD_NAME;
+
+public:
+    AesCbcEncryptor() { }
+    ~AesCbcEncryptor() { }
+
+    void initialize(Bag const& bag, std::string const& gpg_key_user);
+    uint32_t encryptChunk(const uint32_t chunk_size, const uint64_t chunk_data_pos, ChunkedFile& file);
+    void decryptChunk(ChunkHeader const& chunk_header, Buffer& decrypted_chunk, ChunkedFile& file) const;
+    void addFieldsToFileHeader(ros::M_string& header_fields) const;
+    void readFieldsFromFileHeader(ros::M_string const& header_fields);
+    void writeEncryptedHeader(boost::function<void(ros::M_string const&)>, ros::M_string const& header_fields, ChunkedFile&);
+    bool readEncryptedHeader(boost::function<bool(ros::Header&)>, ros::Header& header, Buffer& header_buffer, ChunkedFile&);
+
+private:
+    void buildSymmetricKey();
+
+private:
+    // User name of GPG key used for symmetric key encryption
+    std::string gpg_key_user_;
+    // Symmetric key for encryption/decryption
+    std::basic_string<unsigned char> symmetric_key_;
+    // Encrypted symmetric key
+    std::string encrypted_symmetric_key_;
+    // AES keys for encryption/decryption
+    AES_KEY aes_encrypt_key_;
+    AES_KEY aes_decrypt_key_;
+};
+}
+#endif
+
+#endif
diff --git a/tools/rosbag_storage/include/rosbag/bag.h b/tools/rosbag_storage/include/rosbag/bag.h
index c65533011..e75ef9c78 100644
--- a/tools/rosbag_storage/include/rosbag/bag.h
+++ b/tools/rosbag_storage/include/rosbag/bag.h
@@ -35,6 +35,8 @@
 #ifndef ROSBAG_BAG_H
 #define ROSBAG_BAG_H
 
+#include <memory>
+
 #include "rosbag/macros.h"
 
 #include "rosbag/buffer.h"
@@ -354,7 +356,7 @@ private:
     // Encryptor plugin loader
     pluginlib::ClassLoader<rosbag::EncryptorBase> encryptor_loader_;
     // Active encryptor
-    boost::shared_ptr<rosbag::EncryptorBase> encryptor_;
+    std::shared_ptr<rosbag::EncryptorBase> encryptor_;
 };
 
 } // namespace rosbag
diff --git a/tools/rosbag_storage/include/rosbag/encryptor.h b/tools/rosbag_storage/include/rosbag/encryptor.h
index 2c3f8adab..b4dc31412 100644
--- a/tools/rosbag_storage/include/rosbag/encryptor.h
+++ b/tools/rosbag_storage/include/rosbag/encryptor.h
@@ -46,10 +46,6 @@
 
 #include <boost/function.hpp>
 
-#ifndef _WIN32
-  #include <gpgme.h>
-  #include <openssl/aes.h>
-#endif
 
 namespace rosbag {
 
@@ -133,72 +129,6 @@ public:
     virtual bool readEncryptedHeader(boost::function<bool(ros::Header&)> read_header, ros::Header& header, Buffer& header_buffer, ChunkedFile& file) = 0;
 };
 
-class NoEncryptor : public EncryptorBase
-{
-public:
-    NoEncryptor() { }
-    ~NoEncryptor() { }
-
-    void initialize(Bag const&, std::string const&) { }
-    uint32_t encryptChunk(const uint32_t, const uint64_t, ChunkedFile&);
-    void decryptChunk(ChunkHeader const&, Buffer&, ChunkedFile&) const;
-    void addFieldsToFileHeader(ros::M_string&) const { }
-    void readFieldsFromFileHeader(ros::M_string const&) { }
-    void writeEncryptedHeader(boost::function<void(ros::M_string const&)>, ros::M_string const&, ChunkedFile&);
-    bool readEncryptedHeader(boost::function<bool(ros::Header&)>, ros::Header&, Buffer&, ChunkedFile&);
-};
-
-#ifndef _WIN32
-//! Initialize GPGME library
-/*!
- * This method initializes GPGME library, and set locale.
- */
-void initGpgme();
-
-//! Get GPG key
-/*!
- * \param ctx GPGME context
- * \param user User name of the GPG key
- * \param key GPG key found
- *
- * This method outputs a GPG key in the system keyring corresponding to the given user name.
- * This method throws BagException if the key is not found or error occurred.
- */
-void getGpgKey(gpgme_ctx_t& ctx, std::string const& user, gpgme_key_t& key);
-
-class AesCbcEncryptor : public EncryptorBase
-{
-public:
-    static const std::string GPG_USER_FIELD_NAME;
-    static const std::string ENCRYPTED_KEY_FIELD_NAME;
-
-public:
-    AesCbcEncryptor() { }
-    ~AesCbcEncryptor() { }
-
-    void initialize(Bag const& bag, std::string const& gpg_key_user);
-    uint32_t encryptChunk(const uint32_t chunk_size, const uint64_t chunk_data_pos, ChunkedFile& file);
-    void decryptChunk(ChunkHeader const& chunk_header, Buffer& decrypted_chunk, ChunkedFile& file) const;
-    void addFieldsToFileHeader(ros::M_string& header_fields) const;
-    void readFieldsFromFileHeader(ros::M_string const& header_fields);
-    void writeEncryptedHeader(boost::function<void(ros::M_string const&)>, ros::M_string const& header_fields, ChunkedFile&);
-    bool readEncryptedHeader(boost::function<bool(ros::Header&)>, ros::Header& header, Buffer& header_buffer, ChunkedFile&);
-
-private:
-    void buildSymmetricKey();
-
-private:
-    // User name of GPG key used for symmetric key encryption
-    std::string gpg_key_user_;
-    // Symmetric key for encryption/decryption
-    std::basic_string<unsigned char> symmetric_key_;
-    // Encrypted symmetric key
-    std::string encrypted_symmetric_key_;
-    // AES keys for encryption/decryption
-    AES_KEY aes_encrypt_key_;
-    AES_KEY aes_decrypt_key_;
-};
-#endif
 }
 
 #endif
diff --git a/tools/rosbag_storage/include/rosbag/gpgme_utils.h b/tools/rosbag_storage/include/rosbag/gpgme_utils.h
new file mode 100644
index 000000000..1e44a0fd1
--- /dev/null
+++ b/tools/rosbag_storage/include/rosbag/gpgme_utils.h
@@ -0,0 +1,65 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2017, Open Source Robotics Foundation
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ROSBAG_GPGME_UTILS_H
+#define ROSBAG_GPGME_UTILS_H
+
+#include "rosbag/encryptor.h"
+
+#ifndef _WIN32
+  #include <gpgme.h>
+
+namespace rosbag {
+
+//! Initialize GPGME library
+/*!
+ * This method initializes GPGME library, and set locale.
+ */
+void initGpgme();
+
+//! Get GPG key
+/*!
+ * \param ctx GPGME context
+ * \param user User name of the GPG key
+ * \param key GPG key found
+ *
+ * This method outputs a GPG key in the system keyring corresponding to the given user name.
+ * This method throws BagException if the key is not found or error occurred.
+ */
+void getGpgKey(gpgme_ctx_t& ctx, std::string const& user, gpgme_key_t& key);
+
+}
+#endif
+
+#endif
diff --git a/tools/rosbag_storage/include/rosbag/no_encryptor.h b/tools/rosbag_storage/include/rosbag/no_encryptor.h
new file mode 100644
index 000000000..32e97df57
--- /dev/null
+++ b/tools/rosbag_storage/include/rosbag/no_encryptor.h
@@ -0,0 +1,59 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2017, Open Source Robotics Foundation
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#ifndef ROSBAG_NO_ENCRYPTION_H
+#define ROSBAG_NO_ENCRYPTION_H
+
+#include "rosbag/encryptor.h"
+
+
+namespace rosbag {
+
+class NoEncryptor : public EncryptorBase
+{
+public:
+    NoEncryptor() { }
+    ~NoEncryptor() { }
+
+    void initialize(Bag const&, std::string const&) { }
+    uint32_t encryptChunk(const uint32_t, const uint64_t, ChunkedFile&);
+    void decryptChunk(ChunkHeader const&, Buffer&, ChunkedFile&) const;
+    void addFieldsToFileHeader(ros::M_string&) const { }
+    void readFieldsFromFileHeader(ros::M_string const&) { }
+    void writeEncryptedHeader(boost::function<void(ros::M_string const&)>, ros::M_string const&, ChunkedFile&);
+    bool readEncryptedHeader(boost::function<bool(ros::Header&)>, ros::Header&, Buffer&, ChunkedFile&);
+};
+}
+
+#endif
diff --git a/tools/rosbag_storage/package.xml b/tools/rosbag_storage/package.xml
index 502f5308b..f927fbf90 100644
--- a/tools/rosbag_storage/package.xml
+++ b/tools/rosbag_storage/package.xml
@@ -1,5 +1,5 @@
-<package>
-  <name>rosbag_storage</name>
+<package format="2">
+  <name>ros1_rosbag_storage</name>
   <version>1.14.3</version>
   <description>
     This is a set of tools for recording from and playing back ROS
@@ -8,35 +8,33 @@
   <maintainer email="dthomas@osrfoundation.org">Dirk Thomas</maintainer>
   <license>BSD</license>
 
-  <buildtool_depend>catkin</buildtool_depend>
+  <buildtool_depend>ament_cmake</buildtool_depend>
 
   <build_depend>boost</build_depend>
   <build_depend>bzip2</build_depend>
-  <build_depend version_gte="0.3.17">cpp_common</build_depend>
+  <build_depend>cpp_common</build_depend>
   <build_depend>libconsole-bridge-dev</build_depend>
   <build_depend>libgpgme-dev</build_depend>
   <build_depend>libssl-dev</build_depend>
   <build_depend>pluginlib</build_depend>
   <build_depend>roscpp_serialization</build_depend>
   <build_depend version_gte="0.3.17">roscpp_traits</build_depend>
-  <build_depend>rostest</build_depend>
   <build_depend>rostime</build_depend>
   <build_depend>roslz4</build_depend>
 
-  <run_depend>boost</run_depend>
-  <run_depend>bzip2</run_depend>
-  <run_depend version_gte="0.3.17">cpp_common</run_depend>
-  <run_depend>libconsole-bridge-dev</run_depend>
-  <run_depend>libgpgme-dev</run_depend>
-  <run_depend>libssl-dev</run_depend>
-  <run_depend>pluginlib</run_depend>
-  <run_depend>roscpp_serialization</run_depend>
-  <run_depend version_gte="0.3.17">roscpp_traits</run_depend>
-  <run_depend>rostime</run_depend>
-  <run_depend>roslz4</run_depend>
+  <exec_depend>boost</exec_depend>
+  <exec_depend>bzip2</exec_depend>
+  <exec_depend>cpp_common</exec_depend>
+  <exec_depend>libconsole-bridge-dev</exec_depend>
+  <exec_depend>libgpgme-dev</exec_depend>
+  <exec_depend>libssl-dev</exec_depend>
+  <exec_depend>pluginlib</exec_depend>
+  <exec_depend>roscpp_serialization</exec_depend>
+  <exec_depend version_gte="0.3.17">roscpp_traits</exec_depend>
+  <exec_depend>rostime</exec_depend>
+  <exec_depend>roslz4</exec_depend>
 
   <export>
-    <rosdoc config="${prefix}/rosdoc.yaml"/>
-    <rosbag_storage plugin="${prefix}/encryptor_plugins.xml" />
+    <build_type>ament_cmake</build_type>
   </export>
 </package>
diff --git a/tools/rosbag_storage/src/aes_encryptor.cpp b/tools/rosbag_storage/src/aes_encryptor.cpp
index e0fcb807e..73f88de5a 100644
--- a/tools/rosbag_storage/src/aes_encryptor.cpp
+++ b/tools/rosbag_storage/src/aes_encryptor.cpp
@@ -33,7 +33,8 @@
 *********************************************************************/
 
 #include "rosbag/bag.h"
-#include "rosbag/encryptor.h"
+#include "rosbag/aes_encryptor.h"
+#include "rosbag/gpgme_utils.h"
 
 #include <openssl/rand.h>
 
@@ -47,53 +48,6 @@ namespace rosbag
 const std::string AesCbcEncryptor::GPG_USER_FIELD_NAME = "gpg_user";
 const std::string AesCbcEncryptor::ENCRYPTED_KEY_FIELD_NAME = "encrypted_key";
 
-void initGpgme() {
-    // Check version method must be called before en/decryption
-    gpgme_check_version(0);
-    // Set locale
-    setlocale(LC_ALL, "");
-    gpgme_set_locale(NULL, LC_CTYPE, setlocale(LC_CTYPE, NULL));
-#ifdef LC_MESSAGES
-    gpgme_set_locale(NULL, LC_MESSAGES, setlocale(LC_MESSAGES, NULL));
-#endif
-}
-
-void getGpgKey(gpgme_ctx_t& ctx, std::string const& user, gpgme_key_t& key) {
-    gpgme_error_t err;
-    // Asterisk means an arbitrary user.
-    if (user == std::string("*")) {
-        err = gpgme_op_keylist_start(ctx, 0, 0);
-    } else {
-        err = gpgme_op_keylist_start(ctx, user.c_str(), 0);
-    }
-    if (err) {
-        throw BagException((boost::format("gpgme_op_keylist_start returned %1%") % gpgme_strerror(err)).str());
-    }
-    while (true) {
-        err = gpgme_op_keylist_next(ctx, &key);
-        if (!err) {
-            if (user == std::string("*") || strcmp(key->uids->name, user.c_str()) == 0) {
-                break;
-            }
-            gpgme_key_release(key);
-        } else if (gpg_err_code(err) == GPG_ERR_EOF) {
-            if (user == std::string("*")) {
-                // A method throws an exception (instead of returning a specific value) if the key is not found
-                // This allows rosbag client applications to work without modifying their source code
-                throw BagException("GPG key not found");
-            } else {
-                throw BagException((boost::format("GPG key not found for a user %1%") % user.c_str()).str());
-            }
-        } else {
-            throw BagException((boost::format("gpgme_op_keylist_next returned %1%") % err).str());
-        }
-    }
-    err = gpgme_op_keylist_end(ctx);
-    if (err) {
-        throw BagException((boost::format("gpgme_op_keylist_end returned %1%") % gpgme_strerror(err)).str());
-    }
-}
-
 //! Encrypt string using GPGME
 /*!
  * \return Encrypted string
diff --git a/tools/rosbag_storage/src/bag.cpp b/tools/rosbag_storage/src/bag.cpp
index 7e2e67171..56787fc54 100644
--- a/tools/rosbag_storage/src/bag.cpp
+++ b/tools/rosbag_storage/src/bag.cpp
@@ -40,6 +40,7 @@
 #include <iomanip>
 
 #include <boost/foreach.hpp>
+#include <boost/bind.hpp>
 
 #include "console_bridge/console.h"
 
@@ -57,12 +58,13 @@ using ros::Time;
 
 namespace rosbag {
 
-Bag::Bag() : encryptor_loader_("rosbag_storage", "rosbag::EncryptorBase")
+Bag::Bag() : encryptor_loader_("ros1_rosbag_storage", "rosbag::EncryptorBase")
 {
     init();
 }
 
-Bag::Bag(string const& filename, uint32_t mode) : encryptor_loader_("rosbag_storage", "rosbag::EncryptorBase")
+Bag::Bag(string const& filename, uint32_t mode)
+: encryptor_loader_("ros1_rosbag_storage", "rosbag::EncryptorBase")
 {
     init();
     open(filename, mode);
@@ -70,7 +72,7 @@ Bag::Bag(string const& filename, uint32_t mode) : encryptor_loader_("rosbag_stor
 
 #ifndef BOOST_NO_CXX11_RVALUE_REFERENCES
 
-Bag::Bag(Bag&& other) : encryptor_loader_("rosbag_storage", "rosbag::EncryptorBase") {
+Bag::Bag(Bag&& other) : encryptor_loader_("ros1_rosbag_storage", "rosbag::EncryptorBase") {
     init();
     swap(other);
 }
@@ -222,7 +224,7 @@ void Bag::setEncryptorPlugin(std::string const& plugin_name, std::string const&
     if (!chunks_.empty()) {
         throw BagException("Cannot set encryption plugin after chunks are written");
     }
-    encryptor_ = encryptor_loader_.createInstance(plugin_name);
+    encryptor_ = encryptor_loader_.createSharedInstance(plugin_name);
     encryptor_->initialize(*this, plugin_param);
 }
 
diff --git a/tools/rosbag_storage/src/gpgme_utils.cpp b/tools/rosbag_storage/src/gpgme_utils.cpp
new file mode 100644
index 000000000..69ce9bd4e
--- /dev/null
+++ b/tools/rosbag_storage/src/gpgme_utils.cpp
@@ -0,0 +1,90 @@
+/*********************************************************************
+* Software License Agreement (BSD License)
+*
+*  Copyright (c) 2017, Open Source Robotics Foundation
+*  All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without
+*  modification, are permitted provided that the following conditions
+*  are met:
+*
+*   * Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+*   * Redistributions in binary form must reproduce the above
+*     copyright notice, this list of conditions and the following
+*     disclaimer in the documentation and/or other materials provided
+*     with the distribution.
+*   * Neither the name of Willow Garage, Inc. nor the names of its
+*     contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+*  POSSIBILITY OF SUCH DAMAGE.
+*********************************************************************/
+
+#include "rosbag/gpgme_utils.h"
+
+#include <boost/format.hpp>
+
+namespace rosbag
+{
+
+void initGpgme() {
+    // Check version method must be called before en/decryption
+    gpgme_check_version(0);
+    // Set locale
+    setlocale(LC_ALL, "");
+    gpgme_set_locale(NULL, LC_CTYPE, setlocale(LC_CTYPE, NULL));
+#ifdef LC_MESSAGES
+    gpgme_set_locale(NULL, LC_MESSAGES, setlocale(LC_MESSAGES, NULL));
+#endif
+}
+
+void getGpgKey(gpgme_ctx_t& ctx, std::string const& user, gpgme_key_t& key) {
+    gpgme_error_t err;
+    // Asterisk means an arbitrary user.
+    if (user == std::string("*")) {
+        err = gpgme_op_keylist_start(ctx, 0, 0);
+    } else {
+        err = gpgme_op_keylist_start(ctx, user.c_str(), 0);
+    }
+    if (err) {
+        throw BagException((boost::format("gpgme_op_keylist_start returned %1%") % gpgme_strerror(err)).str());
+    }
+    while (true) {
+        err = gpgme_op_keylist_next(ctx, &key);
+        if (!err) {
+            if (user == std::string("*") || strcmp(key->uids->name, user.c_str()) == 0) {
+                break;
+            }
+            gpgme_key_release(key);
+        } else if (gpg_err_code(err) == GPG_ERR_EOF) {
+            if (user == std::string("*")) {
+                // A method throws an exception (instead of returning a specific value) if the key is not found
+                // This allows rosbag client applications to work without modifying their source code
+                throw BagException("GPG key not found");
+            } else {
+                throw BagException((boost::format("GPG key not found for a user %1%") % user.c_str()).str());
+            }
+        } else {
+            throw BagException((boost::format("gpgme_op_keylist_next returned %1%") % err).str());
+        }
+    }
+    err = gpgme_op_keylist_end(ctx);
+    if (err) {
+        throw BagException((boost::format("gpgme_op_keylist_end returned %1%") % gpgme_strerror(err)).str());
+    }
+}
+
+
+}  // namespace rosbag
diff --git a/tools/rosbag_storage/src/encryptor.cpp b/tools/rosbag_storage/src/no_encryptor.cpp
similarity index 97%
rename from tools/rosbag_storage/src/encryptor.cpp
rename to tools/rosbag_storage/src/no_encryptor.cpp
index 17c62815d..9e6174020 100644
--- a/tools/rosbag_storage/src/encryptor.cpp
+++ b/tools/rosbag_storage/src/no_encryptor.cpp
@@ -32,7 +32,8 @@
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/
 
-#include "rosbag/encryptor.h"
+#include "rosbag/bag.h"
+#include "rosbag/no_encryptor.h"
 
 #include <pluginlib/class_list_macros.hpp>
 
diff --git a/tools/rosbag_storage/test/test_aes_encryptor.cpp b/tools/rosbag_storage/test/test_aes_encryptor.cpp
index 7de167cf0..0a9c8abdb 100644
--- a/tools/rosbag_storage/test/test_aes_encryptor.cpp
+++ b/tools/rosbag_storage/test/test_aes_encryptor.cpp
@@ -41,7 +41,8 @@
 #include "std_msgs/String.h"
 
 #include "rosbag/bag.h"
-#include "rosbag/encryptor.h"
+#include "rosbag/aes_encryptor.h"
+#include "rosbag/gpgme_utils.h"
 #include "rosbag/view.h"
 
 const char *GPG_KEY_USER = "Foo00";
